-------
---0---
---00--
--0000-
0000000
0000000
#include <iostream>
using namespace std;

class node
{
	node *right;
	node *left;
	int data;
    friend class tree;	
};

class tree
{
    node *root;
  public:
    tree(){root=NULL;}		
	node *insert();
	void create_tree(node *t);
	void display();
	void preorder(node *);
	void inorder(node *);
	void postorder(node *);	
};

node* tree::insert()
{
	node *t;
	t=new node;
	t->left=t->right=NULL;
	cout<<"enter data :";
	cin>>t->data;
	return t;
}

void tree::create_tree(node *t)
{
	node *p,*q;
	char choice1,choice2;
	if(root==NULL)
	   root=t;
	cout<<"do u want left child of "<<t->data<<" (y/n)";
	cin>>choice1;
	 if(choice1=='y')
	 {
	     p=insert();
	     t->left=p;
	     create_tree(p);
     }
    else if(choice1=='n')
      	t->left=NULL;
    else
      cout<<"wrong input !!";
      
      
	cout<<"do u want right child of "<<t->data<<" (y/n)";
	cin>>choice2;
	if(choice2=='y')
	{
		q=insert();
		t->right=q;
		create_tree(q);
	}
	else if(choice2=='n')
	   t->right=NULL;
	else
	 cout<<"Wrong input!!";   
	
}  

void tree::display()
{
	preorder(root);
	cout<<"\n";
	inorder(root);
	cout<<"\n";
	postorder(root);
	cout<<"\n";
}

void tree::preorder(node *root)
{
	if(root)
	{
		cout<<root->data;
		preorder(root->left);
		preorder(root->right);
	}
}

void tree::inorder(node *root)
{
	if(root)
	{
		inorder(root->left);
		cout<<root->data;
		inorder(root->right);
	}
}
void tree::postorder(node *root)
{
	if(root)
	{
		postorder(root->left);
		postorder(root->right);
		cout<<root->data;
	}
}



int main() 
{
	tree t;
	node *n;
	n=t.insert();
	t.create_tree(n);
	t.display();
	
	
	return 0;
}